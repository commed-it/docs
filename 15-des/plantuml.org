#+TITLE: Plantuml
#+begin_src plantuml :file sec/img/api-calls.png :dir .
!theme plain
activate Client
activate Server
Client -> Server: "/chat/encounter/{id}/messages"
Server --> Client : [msg1, msg2, msg3...]
Client -> Server:  "/ws/chat/{id}/"
Server --> Client: "socket.accept()"
loop while the websocket is active
    alt Client starts communication
        Client --> Server: a message
        Client --> Client: show message
    else Server starts communication
        Server --> Client: a message
        Server --> Server: validate message
        Server --> Server: save message
        Server --> Server: send message to group chat
    end
end
deactivate Client
#+end_src

#+RESULTS:
[[file:sec/img/api-calls.png]]


#+begin_src json
{
  "user": id,
  "type": "message" | "formalOffer",
  "message": "text",
  "formalOffer": formalOfferId,
}

#+end_src


* New Database model
#+begin_src plantuml :file sec/img/database-model-new.png :dir .
!theme plain

namespace product {
class Product <<persistent>> {
    + id : Int
    ..
    + owner : User
    + description : Text
    + latitude : Double
    + longitude : Double
}

class ProductImage <<persistent>> {
    + name : Chars
    + imageFile : ImageFile
}

class Tag <<persistent>> {
    + name : Chars
}

class Category <<persistent>> {
    + name : Chars
}

Product *-- ProductImage
Tag <-- Product
Category *-- Tag

}

namespace enterprise {

    class Enterprise <<persistent>> {
        + owner : User.id
        ..
        + NIF : Chars
        + name : Chars
        + contactInfo : Chars
        + description : RichText
        ..
        + logo: ImageFile
        + banner: ImageFile
        + location: Chars
    }
}


class User <<persistent>> {
    + id: Int
    ..
    + email : Chars
    + username : Chars
    + password : Chars
}

namespace offer {

class Encounter {
    pk: UUID
}

class FormalOffer <<persistent>> {
    + encounterId : Int
    + version : Int
    ..
    + contract : RichText
    ..
    + pdf : File
    + state: StateFormalOffer
}
}

class chat.Message {
    + author : User
    + channel_context : UUID
    + msg : Text
    + timestamp : Date
}

chat.Message "*" -- "1" offer.Encounter : message from >
chat.Message "*" -- "1" User: author of the message <




User "1" -- "0..*" product.Product : owns >
User "1" -- "1" enterprise.Enterprise : owns >
User "1" -- "*" offer.Encounter : isInterestedInProduct >
product.Product "1" -- "0..*" offer.Encounter : startedChat >
offer.FormalOffer "0..*" -- "1" offer.Encounter : startedFormalOffer <


#+end_src

#+RESULTS:
[[file:sec/img/database-model-new.png]]
#+begin_src plantuml :file sec/use_case_diagram/usecase_diagram.png :dir .
!theme plain

package Commed {
    usecase "Register into application" as uc1
    usecase "Log In into Application" as uc2
    usecase "Search for Products/services" as uc3
    usecase "Publish Products/Services" as uc4
    usecase "Start chat for a product" as uc5
    usecase "Send comercial transation contract" as uc6
    usecase "Evidences Generation" as uc7
    usecase "Digitaly Sign contract" as uc8
    usecase "List my chats" as uc9
    usecase "List my formal offers" as uc10
}


actor User as u
actor EUDSS as eudss

u --> uc1
uc2 <|-- uc1
u --> uc3
uc4 <|-- uc2
uc5 <|-- uc2
uc6 <|-- uc5
uc8 <|-- uc5
uc7 <|-- uc8
uc9 <|-- uc2
uc10 <|-- uc2
eudss --> uc8


#+end_src

#+RESULTS:
[[file:sec/use_case_diagram/usecase_diagram.png]]
